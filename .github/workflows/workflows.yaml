name: Deploy Docker Monitor to EC2 via ECR

on:
  push:
    branches: [ main ]

jobs:
  build_and_push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set ECR URI as environment variable
      run: echo "ECR_URI=${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_ENV

    - name: Provision SES Identities
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
        | docker login --username AWS --password-stdin $ECR_URI

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }} .
        docker tag ${{ secrets.ECR_REPOSITORY }}:latest $ECR_URI:latest
        docker push $ECR_URI:latest

  deploy:
    name: Deploy to EC2 from ECR
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:

    - name: SSH into EC2 and deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          REGION="${{ secrets.AWS_REGION }}"
          REPO_NAME="${{ secrets.ECR_REPOSITORY }}"
          ECR_URI="${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}"

          # Authenticate to ECR
          aws ecr get-login-password --region \$REGION | docker login --username AWS --password-stdin \$ECR_URI

          # Pull latest image
          docker pull \$ECR_URI:latest

          # Stop existing container
          docker rm -f container-monitor || true

          # Run new container
          docker run -d \
            --name container-monitor \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }} \
            \$ECR_URI:latest
        EOF
